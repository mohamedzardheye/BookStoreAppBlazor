@page "/authors/search"
@inject IAuthorService authorService;

@inject NavigationManager navManager



@inject HttpClient http
@inject IJSRuntime js

@if (response.Success == false)
{
    <div class="alert alert-danger">
        <p><em>@response.Message</em></p>
    </div>

}


<div class="side-app">
    <!-- CONTAINER -->
    <div class="main-container container-fluid">
        <!-- PAGE-HEADER -->



        <div class="page-header">

            <div class="ms-auto pageheader-btn">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item"><a href="javascript:void(0);">Home</a></li>
                    <li class="breadcrumb-item active" aria-current="page">Areas</li>
                </ol>
            </div>
        </div>


        <div class="col-offset-10 col-md-2 mb-3">
            <div class="btn-list">
                <MudButton Variant="Variant.Filled"
                EndIcon="@Icons.Material.Filled.Add"
                Class="align-content-lg-end"
                OnClick="goToAddAuthor"
                Size="Size.Large"
                Color="Color.Primary">
                    Add New Author
                </MudButton>



            </div>
        </div>





        <!--start searcj b;pcl-->

        <div class="card mt-3 border-0">
            <div class="card-body">


                <EditForm Model="authorFilterDto" OnValidSubmit="handleSubmit">
                    <DataAnnotationsValidator />
                    <ValidationSummary />

                    <div class="row g-2">
                        <div class="col-md-2">
                            <MudTextField Label="First Name" Variant="Variant.Outlined" @bind-Value="authorFilterDto.FirstName"
                            For="@(() => authorFilterDto.FirstName)" />

                        </div>

                        <div class="col-md-2">
                            <MudTextField Label="Last Name" Variant="Variant.Outlined" @bind-Value="authorFilterDto.LastName"
                                          For="@(() => authorFilterDto.LastName)" />
                            @*   <MudTextField @bind-Value="TextValue" Label="Last Name" Variant="Variant.Outlined"></MudTextField> *@

                        </div>


                        <div class="col-md-2">
                            @*  <MudTextField @bind-Value="TextValue" Label="Outlined" Variant="Variant.Outlined"></MudTextField> *@

                        </div>

                        <div class="col-md-2">
                            <div class="search-box">
                                @* <MudDatePicker Label="Date From" Variant="Variant.Outlined" /> *@

                            </div>
                        </div>
                        <div class="col-md-2">

                            @* <MudDatePicker Label="Date To" Variant="Variant.Outlined" /> *@

                        </div>


                        <div class="col-md-2">
                            <p />

                            <MudButton Color="Color.Inherit" Size="Size.Large" ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Search" Style="background-color:green;color:white;">
                                Filter
                            </MudButton>

                            <MudButton Color="Color.Inherit" Size="Size.Large"   StartIcon="@Icons.Material.Filled.LockReset" Style="background-color:red;color:white;">
                                Export
                            </MudButton>

                        </div>




                    </div>
                </EditForm>
                <!--end row-->

            </div>
        </div>


        <!-- end container flue-->



        @if (loading == true)
        {
            <Loading />


        }

        else
        {






            <!-- PAGE-HEADER END -->
            <MudTable Items="@Authors"
            Dense="true"
            Hover="@hover"
            SortLabel="Sort By"
            Bordered="@bordered" Striped="@striped">

                <ToolBarContent>
                    <MudText Typo="Typo.h6">Areas</MudText>
                    <MudSpacer />





                </ToolBarContent>
                <HeaderContent>
                    <MudTh>First Name</MudTh>
                    <MudTh>Last Name </MudTh>
                    <MudTh>Action</MudTh>

                </HeaderContent>

                <RowTemplate>

                    <MudTd DataLabel="firstName">@context.FirstName</MudTd>
                    <MudTd DataLabel="lastName">@context.LastName</MudTd>

                    <MudTd DataLabel="Actions">

                        <MudIconButton Icon="@Icons.Material.Filled.Delete"
                        Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" />


                        <MudIconButton Icon="@Icons.Material.Filled.Edit"
                        Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" />

                    </MudTd>
                </RowTemplate>
                <PagerContent>

                    <Pagination TotaPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2"
                    SelectedPage="SelectedPage"></Pagination>
                </PagerContent>
            </MudTable>








        }

    </div>


</div>



@code {

    private bool _error;
    private bool _completed;
    private bool _disabled;

    private int _index;


    private bool dense = false;
    private bool hover = true;
    private bool striped = false;
    private bool bordered = false;
    private bool loading = true;



    private int totalPageQuantity = 10;
    private int currentPage = 1;
    private string nameFilter = string.Empty;




    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await loadAuthors(page);
    }




    private AuthorFilterDto authorFilterDto = new AuthorFilterDto();

    private List<AuthorReadOnlyDto> Authors;

    private Response<List<AuthorReadOnlyDto>> response = new Response<List<AuthorReadOnlyDto>> { Success = true };

    protected override async Task OnInitializedAsync()
    {

        await loadAuthors(1);
      
    }


    async Task handleSubmit()
    {
        await loadAuthors(1);
    }




    async Task loadAuthors(int Page)
    {

        loading = true;
        authorFilterDto.Page = Page;
        authorFilterDto.QuantityPerPage = 10;

        
        response = await authorService.GetSearchAuthors(authorFilterDto);
        Console.WriteLine(response.ToString());
        if (response.Success)
        {
          
            Authors = response.data;
            loading = false;
        }
      
        //await Task.Delay(4000);
       
    }




    async Task goToAddAuthor()
    {
        navManager.NavigateTo("/authors/create");
    }













    
    }


