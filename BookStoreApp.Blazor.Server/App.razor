@using BookStoreApp.Blazor.Server.Providers
@using BookStoreApp.Blazor.Server.Shared
 @inject NavigationManager avigationManager
<CascadingAuthenticationState>
    <Router AppAssembly="@typeof(App).Assembly">
        <Found Context="routeData">
            <AuthorizeRouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" >

                <NotAuthorized>
                    @if(context.User?.Identity?.IsAuthenticated == false)
                    {
                        <RedirectToLogin />

                       
                    }
                    else
                    {
                        <div class="alert alert-warning">
                            <p><strong>Authentication required</strong></p>
                            <p>You need to authenticate to access this page.</p>
                        </div>
                    })

                    <p>You're not authorized to view this page</p>
                </NotAuthorized>
            </AuthorizeRouteView>
            <FocusOnNavigate RouteData="@routeData" Selector="h1" />
        </Found>
        <NotFound>
            <LayoutView Layout="@typeof(MainLayout)">
                <p>Sorry, there's nothing at this address.</p>
            </LayoutView>
        </NotFound>
    </Router>

    </CascadingAuthenticationState>
@* 
<Router AppAssembly="@typeof(App).Assembly">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
        <FocusOnNavigate RouteData="@routeData" Selector="h1" />
    </Found>
    <NotFound>
        <PageTitle>Not found</PageTitle>
        <LayoutView Layout="@typeof(MainLayout)">
            <p role="alert">Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>
 *@


@code {
    [Inject] private ApiAuthenticationStateProvider AuthStateProvider { get; set; } = default!;

    protected override void OnInitialized()
    {
        // Start checking token expiration
        AuthStateProvider.StartChecking();
    }
}